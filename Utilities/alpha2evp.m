% function trialcount=alpha2evp(mfile,force_regen,subtract_common)
function trialcount=alpha2evp(mfile,forceregen,subtract_common)
% 
% This function transfers raw spike data from alpha-omega .map files to evp
% files.  all relvant information is stored in the m-file, which is
% generated by baphy after an experiment (and/or block of stimuli)
%

global C_r C_raw C_lfp C_mfilename C_evpfilename C_ENABLE_CACHING  BAPHY_LAB

if nargin<0
    error('Syntax: alpha2evp(mfile)');
end;
if ~exist('forceregen','var'),
    forceregen=0;
end
if ~exist('subtract_common','var'),
    subtract_common=0;
end
LoadMFile(mfile); % load globalparams, exptparams, and events

ferret = globalparams.Ferret;
mode   = globalparams.Physiology;
electrodes = globalparams.NumberOfElectrodes;
chan=electrodes;

[mfilepath,fname,mext]  = fileparts(globalparams.mfilename);
savefname = fname;

% daq is alpha omega files (map files)
if isfield(globalparams,'daqmfilename'),
    MULTISTIM=1;
    % this is for multi-stim, where the mfilename does not match the
    % map file names. (nor does trial number match! see below!)
    [trialdir,daqfname]=fileparts(globalparams.daqmfilename);
    daqfpath = [trialdir filesep 'raw' filesep];
    if globalparams.HWSetup ~= 11
        daqextn = '.map';
    elseif strcmpi(BAPHY_LAB,'nsl') && globalparams.HWSetup == 11
        daqextn = '.mpx';
    end
    
    % identify the raw files that are for this particular stimulus:
    daqfileidx=find(exptparams.triallog(1,:)==exptparams.thisstimidx);
    % length of this should be equal to globalparams.rawfilecount !
else
    MULTISTIM=0;
    trialdir=mfilepath;
    daqfpath = [trialdir filesep 'raw' filesep];
    daqfname = fname;
    if globalparams.HWSetup ~= 11
        daqextn = '.map';
    elseif strcmpi(BAPHY_LAB,'nsl') && globalparams.HWSetup == 11
        daqextn = '.mpx';
    end
end

if ~isfield(globalparams,'rawfilecount'),
    warning('assuming 1 map file per trial');
    globalparams.rawfilecount=max(cat(1,exptevents.Trial));
end

numchannel = chan;
channame={};
for i = 1:numchannel
    channame{i} = ['SPK',num2str(i)];
end;
lfpchanname={};
for i = 1:numchannel
    lfpchanname{i} = ['LFP',num2str(i)];
end;

if globalparams.HWSetup ~= 11
    if ~exist([daqfpath daqfname '001' daqextn],'file'),
        % maybe its a old format, when we stored the .map files in tmp
        % directory:
        daqfpath = [trialdir filesep 'tmp' filesep];
    end
    % check for extra mapfile
    if 0&& exist([daqfpath daqfname sprintf('%03d',globalparams.rawfilecount+1) daqextn],'file') &&...
            ~exist([daqfpath daqfname sprintf('%03d',globalparams.rawfilecount+2) daqextn],'file') &&...
            0
        %yn=questdlg('One extra map file detected.  Suspected offset problem.  Shift map files?');
        disp('One extra map file.  Shifting map files to correct offset problem');
        yn='Yes';
        if strcmp(yn,'Yes'),
            savedir=pwd;
            cd(daqfpath);
            dd=dir([daqfname '*' daqextn]);
            fprintf('moving %s to %s\n',dd(1).name,[daqfname 'bad' daqextn]);
            doscmd=['ren ' daqfname '001' daqextn ' ' daqfname 'bad' daqextn];
            dos(doscmd);
            for ii=2:length(dd);
                fprintf('moving %s to %s\n',dd(ii).name,dd(ii-1).name);
                doscmd=['ren ' dd(ii).name ' ' dd(ii-1).name];
                dos(doscmd);
            end
        end
    end
end

% spike channel sampling rate
FS.AI = globalparams.HWparams.fsAI;

if isempty(globalparams.tempevpfile),
   
elseif globalparams.tempevpfile(1)=='\',
   globalparams.tempevpfile=['.' globalparams.tempevpfile];
end
if exist(globalparams.tempevpfile,'file'),
    [spikechancount,auxchancount,trialcount]=evpgetinfo(globalparams.tempevpfile);
elseif 0 && exist(globalparams.evpfilename,'file'),
    [spikechancount,auxchancount,trialcount]=evpgetinfo(globalparams.evpfilename);
    if trialcount>=globalparams.rawfilecount
        return
    end
else
    warning('temp evp not found.  no aux data available!');
    auxchancount=0;
    trialcount=globalparams.rawfilecount;
end
if ~exist(globalparams.evpfilename,'file') && ~exist([globalparams.evpfilename '.gz'],'file'),
    fprintf('Creating evp file %s...\n',basename(globalparams.evpfilename));
    oldtrialcount=0;
elseif forceregen
    disp('full evp regeneration forced');
    delete(globalparams.evpfilename);
    [pp,bb]=fileparts(globalparams.evpfilename);
    cachemask=[pp '\tmp\',bb,'.*sig*.mat'];
    delete(cachemask);
    oldtrialcount=0;
else
    [oldspcount,oldauxcount,oldtrialcount]=evpgetinfo(globalparams.evpfilename);
    if (oldspcount~=length(channame)) | (oldauxcount~=auxchancount),
        warning('Channel count mismatch! Overwriting existing evp file.');
        delete(globalparams.evpfilename);
        oldtrialcount=0;
    elseif oldtrialcount==trialcount,
        fprintf('Evp file %s is already complete.\n',basename(globalparams.evpfilename));
        return
    else
        fprintf('Appending existing evp file %s...\n',basename(globalparams.evpfilename));
    end
end

% load lick/microphone data. don't cache!
if auxchancount>0
    C_ENABLE_CACHING=0;
    [rs,ridx,alllickdata,licktrialidx]=evpread(globalparams.tempevpfile,[],...
        1:auxchancount,(oldtrialcount+1):globalparams.rawfilecount);
    C_ENABLE_CACHING=1;
    licktrialidx=[licktrialidx;length(alllickdata)+1];
else
    licktrialidx=[];
end

% only reset cache if evp filename has changed
if ~strcmp(C_evpfilename,globalparams.evpfilename) | isempty(C_raw),
    C_mfilename=mfile;
    C_evpfilename=globalparams.evpfilename;
    C_raw={};
    C_r={};
    fprintf('%s: Creating evp cache for %s\n',mfilename,mfile);
end

trialcount=globalparams.rawfilecount;
for trialnum = (oldtrialcount+1):globalparams.rawfilecount,
    if MULTISTIM,
        if globalparams.HWSetup ~= 11
            evpdaq=sprintf('%s%s%03d.map',daqfpath,daqfname,daqfileidx(trialnum));
        elseif strcmpi(BAPHY_LAB,'nsl') && globalparams.HWSetup == 11
            evpdaq=sprintf('%s%s%04d.mpx',daqfpath,daqfname,daqfileidx(trialnum));
        end
        
    else
        if globalparams.HWSetup ~= 11
            evpdaq=sprintf('%s%s%03d.map',daqfpath,daqfname,trialnum);
        elseif strcmpi(BAPHY_LAB,'nsl') && globalparams.HWSetup == 11
            evpdaq=sprintf('%s%s%04d.mpx',daqfpath,daqfname,trialnum);
        end
    end
    if trialnum==oldtrialcount+1,
        try
            fileinfo = mapread(evpdaq,'datainfo',channame{1});
            spikesamplerate=fileinfo.SampleRate;
        catch
            disp('no spike data');
            spikesamplerate=1;
        end
        try
            lfileinfo = mapread(evpdaq,'datainfo',lfpchanname{1});
            lfpsamplerate=lfileinfo.SampleRate;
            lfpexists=1;
            %disp('found lfp data');
        catch
            disp('no lfp data');
            spikesamplerate=1;
            lfpexists=0;
            lfpsamplerate=0;
        end
    end
    
    % read whole file
    try,
        data = [mapread(evpdaq,'Channels',channame,'DataFormat','Native')];
        if ~iscell(data) data = {data};end
        for ii=1:length(data),
            if isempty(data{ii}) & ii<length(data),
                data{ii}=data{ii+1}.*0;
            elseif isempty(data{ii}),
                data{ii}=data{1}.*0;
            end
        end
    
        if lfpexists,
            ldata = [mapread(evpdaq,'Channels',lfpchanname,'DataFormat','Native')];
            if ~iscell(ldata) ldata = {ldata};end
            for ii=1:length(ldata),
                if isempty(ldata{ii}) & ii<length(ldata),
                    ldata{ii}=ldata{ii+1}.*0;
                elseif isempty(ldata{ii}),
                    ldata{ii}=ldata{1}.*0;
                end
            end
            lfpoutdata=cat(2,ldata{:});
        else
            lfpoutdata=[];
        end
        outdata=cat(2,data{:});
    catch
        warning('error on mapread! trial has no data!');
        outdata=zeros(1,numchannel);
        lfpoutdata=zeros(1,numchannel);
    end
    
    C_raw{trialnum}=outdata;
    C_lfp{trialnum}=lfpoutdata;
    % nima modified the following line, because the index was out of bound:
    if auxchancount>0,
        lickdata=alllickdata(licktrialidx(trialnum-oldtrialcount):(licktrialidx(trialnum-oldtrialcount+1)-1),:);
    else
        lickdata=[];
    end
    
    if subtract_common,
        std(double(outdata))
      fprintf('NN ');
      mm=round(mean(outdata,2));
      
      for nn=1:size(outdata,2),
          x=double(outdata(:,nn));
          b=x'*mm ./ (mm'*mm);
          fprintf('%.2f ',b);
          outdata(:,nn)=int16(x-b.*mm);
      end   
      
      figure(1);
      clf
      plot(outdata((end-1000):end,:));
      hold on;
      plot(mm((end-1000):end),'r','linewidth',2);
      hold off
%       dd=xcov(double(outdata(:,1)),double(outdata(:,2)),1000,'unbiased');
%         figure(1);
%         clf
%         plot(dd);
%         trialnum
%         pause
        std(double(outdata))
      
    end
    
    evpwrite(globalparams.evpfilename,outdata,lickdata,spikesamplerate,FS.AI,lfpoutdata,lfpsamplerate);
end
