% function [stim,stimparam]=loadtorc(parmfile,startbin,stopbin,[saf],[chancount],[wholedur=0]);
%
% generate tor in "ststruct" format, whatever that is, using
% info in parmfile (.par or .m, generated by daqpc)
%
% also returns stimparam, which contains a bunch of useful
% information about the stimulus
%
% created SVD 8/12/05
%
function [stim,stimparam,waveparams,TorcNames]=loadtorc(parmfile,startbin,stopbin,saf,chancount,wholedur);

TorcNames = [];
fprintf('generating torc spectrogram for %s\n',basename(parmfile));

% newf==0: old format
% newf==1: new format
%newf = ~isempty(findstr(parmfile,'_'));
newf = ~isempty(findstr(parmfile,'_')) & ~strcmp(parmfile(end-3:end),'.par');

if ~newf
   paramdata = paramsfromfile(parmfile);
   [bb,pp]=basename(parmfile);
   inffile = getfieldstr(paramdata,'inf_file');
   [wfmTotal,a1s_freqs,a1infodata,speechwfm]=geta1info([pp inffile]); %#ok<NASGU>
   stimparam.a1am = geta1vec(a1infodata,'Ripple amplitudes');
   stimparam.a1rf = geta1vec(a1infodata,'Ripple frequencies');
   stimparam.a1ph = geta1vec(a1infodata,'Ripple phase shifts');
   stimparam.a1rv = geta1vec(a1infodata,'Angular frequencies');
   stimparam.lfreq = getfieldval(paramdata,'lower_freq')*1000;
   stimparam.hfreq = getfieldval(paramdata,'upper_freq')*1000;
   stimparam.numrecs = getfieldval(paramdata,'Records');
   stimparam.sample_freq=getfieldval(paramdata,'sample_freq');
   
   [stimparam.waveParams,stimparam.W,stimparam.Omega,stimparam.nrips] = ...
       makewaveparams(stimparam.a1am,stimparam.a1rf,...
                      stimparam.a1ph,stimparam.a1rv);
   stimparam.stdur= 3000;
   stimparam.stonset= 0;
   
   if stimparam.lfreq==125,
      stimparam.Frequency='l';
   elseif stimparam.lfreq==250,
      stimparam.Frequency='h';
   elseif stimparam.lfreq==500,
      stimparam.Frequency='v';
   else
      stimparam.Frequency='?';
   end
   
else
    LoadMFile(parmfile);
    
    if ~exist('globalparams','var'),
        % old new (daqpc) version
        [b,ppath]=basename(parmfile);
        b=strsep(b,'.');
        b=b{1};
        if ~isempty(ppath),
            addpath(ppath);
        end
        stmtinit = ([ 'expData = ' b '(''init'');']);eval(stmtinit);
        stmtlist = ([ 'torcList = ' b '(''reference'');']);eval(stmtlist);
        stmtplay = ([ 'playOrder = ' b '(''playorder'');']); eval(stmtplay);
        if ~isempty(ppath),
            rmpath(ppath);
        end

        torcListtag= torcList.tag;
        t1handle = torcList.handle(1);
        stimparam = readinfo(torcList,expData);
        if isfield(torcList,'type') && strcmpi(torcList.type,'clicktrain')
            stimparam.ClickStart = get(torcListtag,'ClickStart');
        end
        [stimparam.waveParams,stimparam.W,stimparam.Omega,stimparam.nrips] = ...
            makewaveparams(stimparam.a1am,stimparam.a1rf,...
            stimparam.a1ph,stimparam.a1rv);

        stimparam.filenames={};
        for ii=1:length(torcList.handle),
            stimparam.filenames{ii}=get(torcList.handle(ii),'Filename');
        end
        try
            stimparam.Frequency=get(torcListtag,'Frequency');
        catch
            try
                stimparam.Frequency=get(torcListtag,'FrequencyRange');
            catch
                stimparam.Frequency=get(torcListtag,'TorcCompFreq');
            end
        end
        stimparam.sample_freq=get(expData,'StimSamplingFreq');
    else
        % new new (baphy) format
        % get the names:
        if isfield(exptparams.TrialObject,'Torchandle'),
            TorcObject=exptparams.TrialObject.Torchandle;
        else
            TorcObject=exptparams.TrialObject.ReferenceHandle;
        end
        TorcNames=TorcObject.Names;
        for ii=1:length(TorcNames),
            bb=strsep(TorcNames{ii},' ',0);
            TorcNames{ii}=bb{1};
        end
        
        rasterfs=1000;
        referencecount=TorcObject.MaxIndex;
        %repcount=exptparams.Repetition;

        %triallen=exptparams.LogDuration; %#ok<NASGU>
        if isfield(exptparams.TrialObject.ReferenceHandle,'Duration')
            refduration=ifstr2num(exptparams.TrialObject.ReferenceHandle.Duration);
        else
            refduration=ifstr2num(exptparams.TrialObject.ReferenceHandle.TorcDuration);
        end
        stimparam.numrecs   = referencecount; %get(t,'Index');
        stimparam.mf        = rasterfs/1000; % config('mf');
        dur = refduration;
        stimparam.ddur      = round(1000*dur);
        stimparam.stdur     = round(1000*dur);
        stimparam.stonset   = exptparams.TrialObject.ReferenceHandle.PreStimSilence*1000;
        if isfield(exptparams.TrialObject.ReferenceHandle,'FrequencyRange')
            stimparam.Frequency = lower(exptparams.TrialObject.ReferenceHandle.FrequencyRange(1));
        else
            stimparam.Frequency = lower(exptparams.TrialObject.ReferenceHandle.TorcFreqRange(1));
        end                    
        stimparam.lfreq     = exptparams.TrialObject.ReferenceHandle.Params(1).LowestFrequency;
        stimparam.hfreq     = exptparams.TrialObject.ReferenceHandle.Params(1).HighestFrequency;
        stimparam.octaves=log2(stimparam.hfreq/stimparam.lfreq);
        stimparam.a1am   = {};
        stimparam.a1rf   = {};
        stimparam.a1ph   = {};
        stimparam.a1rv   = {};

        for ii = 1:stimparam.numrecs
            stimparam.a1am{ii} = exptparams.TrialObject.ReferenceHandle.Params(ii).RippleAmplitude;
            stimparam.a1rf{ii} = exptparams.TrialObject.ReferenceHandle.Params(ii).Scales;
            stimparam.a1ph{ii} = exptparams.TrialObject.ReferenceHandle.Params(ii).Phase;
            stimparam.a1rv{ii} = exptparams.TrialObject.ReferenceHandle.Params(ii).Rates;
        end;

        [stimparam.waveParams,stimparam.W,stimparam.Omega,stimparam.nrips,stimparam.basep] = ...
            makestimprofile(stimparam.a1am,stimparam.a1rf,stimparam.a1ph,...
            stimparam.a1rv);    

        stimparam.basep = round(1000/min(abs(diff([0 unique(abs(stimparam.W(find(stimparam.W))))]))));
    end
end
if exist('onseil','file') && onseil==1,
   stimparam.wfmpath='/homes/svd/data/wfm/TORCwfms/';
else
   stimparam.wfmpath='/auto/data/nsl/common/wfm/TORCwfms/';
end
stimparam.wfmfile=['TORC_%02d_',stimparam.Frequency,'501.wfm'];
stimparam.wfmindices=1:stimparam.numrecs;

stimparam.basep = round(1000/min(abs(diff([0 unique(abs(stimparam.W(find(stimparam.W))))]))));
maxv = max(abs(stimparam.W));
maxf = max(max(abs(stimparam.Omega)));
if ~exist('saf','var'),
   stimparam.safdef = maxv*2 + 1000/stimparam.basep;     
else
   stimparam.safdef=saf;
end
if ~exist('chancount','var'),
   stimparam.numcompdef = maxf*2*5 + 1;
else
   stimparam.numcompdef = chancount;
end
if ~exist('wholedur','var') | wholedur==0,
   dur=stimparam.basep; % only return one cycle
else
   dur=stimparam.stdur; % entire length of trial
end

% Need to modify stimscal call to accomodate for log amplitude torcs
% Ignoring for now
%[stim,freqs] = ststruct(stimparam.waveParams,stimparam.W,stimparam.Omega,...
 %                          125,4000,stimparam.numcompdef,...
 %                          stimparam.basep,stimparam.safdef);

%modified so that number of spectral channels (numcompdef) and
%sampling rate (safdef) are flexible.  also plug in lfreq and hfreq
%values recovered from parm file, not hard coded values. this may
%not make a difference since everything just scales logorithmically
[stim,freqs] = ststruct(stimparam.waveParams,stimparam.W,stimparam.Omega,...
                           stimparam.lfreq,stimparam.hfreq,stimparam.numcompdef,...
                           dur,stimparam.safdef);
stim = stimscal(stim,'moddep',0.9,[],...
                   ceil(10*stimparam.safdef*stimparam.basep/1000),...
                   ceil(10*stimparam.numcompdef/5));

if exist('startbin','var'),
   if startbin==0,
      startbin=1;
   end
   if ~exist('stopbin','var') | stopbin==0,
      stopbin=size(stim,2).*size(stim,3);
   elseif stopbin>size(stim,2).*size(stim,3),
      stopbin=size(stim,2).*size(stim,3);
   end
   stim=stim(:,startbin:stopbin);
end
waveparams = stimparam.waveParams;
